//--bnd-inbits=7 --fe-fpencoding AS_FIXPOINT

include "common/types.skh";
include "common/String.sk";
include "common/StringArray.sk";
include "common/Any.sk";
include "common/AnyArray.sk";
include "common/StringAnyArray.sk";
include "common/StringAnyMap.sk";
include "common/SQLFunctions.sk";
include "common/G1.sk";
include "common/G2.sk";
include "config.sk";

//////////////////////////////////////////
// Driver
String[2] sinputs;
double[2] dinputs;

generator String SIMPLE_STR() {
    return {| EMPTY_STRING | sinputs[0] | sinputs[1] |};
}

generator int SIMPLE_INT() {
    return {| -1 | 0 | 1 |};
}

generator double SIMPLE_DOUBLE() {
    return {| 1.0 | dinputs[0] | dinputs[1] |};
}

generator bit SQL(int depth, int grammar) {
    if (grammar==1) return BOOL1(depth);
    if (grammar==2) return BOOL2(depth);
    assert 0;
}

bit udf(String t1, double t3, String state, double discount) {
    bit t2 = String_equals(state, t1);
    bit t4 = discount > t3;
    bit t5 = t2 && t4;
    return t5;
}

harness void main(int sz1, char[sz1] buf1, int sz2, char[sz2] buf2, double t3, double discount) {
    assume sz1 <= 3;
    assume sz2 <= 3;

    String t1 = new String(sz=sz1, buf=buf1);
    String state = new String(sz=sz2, buf=buf2);
    sinputs[0] = t1;
    sinputs[1] = state;
    dinputs[0] = t3;
    dinputs[1] = discount;
    
    bit o1 = udf(t1, t3, state, discount);
    bit o2 = SQL(depth, grammar);
    assert nFunc==depth-1;
    assert 1.0 == 1.0;
    assert o1 == o2;
}
