//////////////////////////////////////////
// Models of Array[String]
String StringArray_get(StringArray arr, int i) {
    assume i < arr.sz;
    return arr.buf[i];
}

bit StringArray_equals(StringArray a, StringArray b) {
    if (a.sz != b.sz) return 0;
    for (int i=0; i<a.sz; i++) {
        if (! String_equals(a.buf[i], b.buf[i])) return 0;
    }
    return 1;
}

StringArray StringArray0() {
    return new StringArray(sz=0, buf={});
}

StringArray StringArray1(String s) {
    return new StringArray(sz=1, buf={s});
}

StringArray StringArray2(String a, String b) {
    return new StringArray(sz=2, buf={a, b});
}

bit StringArray_contains(StringArray sa, String s) {
    for (int i=0; i<sa.sz; i++) {
        if (String_equals(sa.buf[i], s)) return 1;
    }
    return 0;
}

StringArray StringArray_intersect(StringArray a, StringArray b) {
    int size=0;
    for (int i=0; i<a.sz; i++) {
        if (StringArray_contains(b, a.buf[i])) size ++;
    }

    StringArray ret = new StringArray(sz=size);
    int p = 0;
    for (int i=0; i<a.sz; i++) {
        if (StringArray_contains(b, a.buf[i])) {
            ret.buf[p] = a.buf[i];
            p ++;
        }
    }

    return ret;
}

StringArray StringArray_concat(StringArray a, StringArray b) {
    StringArray ret = new StringArray(sz=a.sz+b.sz);
    for (int i=0; i<a.sz; i++) {
        ret.buf[i] = a.buf[i];
    }
    for (int i=0;i<b.sz; i++) {
        ret.buf[a.sz+i] = b.buf[i];
    }
    return ret;
}
