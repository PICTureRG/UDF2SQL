//--bnd-inbits=2 --bnd-unroll-amnt=18 --fe-fpencoding AS_FIXPOINT

include "common/types.skh";
include "common/String.sk";
include "common/StringArray.sk";
include "common/Any.sk";
include "common/AnyArray.sk";
include "common/StringAnyArray.sk";
include "common/StringAnyMap.sk";
include "common/SQLFunctions.sk";
include "common/G1.sk";
include "common/G2.sk";
include "config.sk";

//////////////////////////////////////////
// Driver
String[2] inputs;

String STRING_CODE = new String(sz=6, buf={'c', 'o', 'd', 'e', ':', ' '});
String STRING_NAME = new String(sz=6, buf={',', 'n', 'a', 'm', 'e', ':'});

generator String SIMPLE_STR() {
    return {| EMPTY_STRING | STRING_CODE | STRING_NAME | inputs[0] | inputs[1] |};
}

generator int SIMPLE_INT() {
    return {| -1 | 0 | 1 |};
}

generator double SIMPLE_DOUBLE() {
    return {| 1.0 |};
}

String udf(String t1, String t4) {
    String t2 = String_concat(STRING_CODE, t1);
    String t3 = String_concat(t2, STRING_NAME);
    String t5 = String_concat(t3, t4);
    return t5;
}

generator String SQL(int depth, int grammar) {
    if (grammar==1) return STR1(depth);
    if (grammar==2) return STR2(depth);
    assert 0;
}

harness void main(int sz1, char[sz1] buf1, int sz2, char[sz2] buf2) {
    String x = new String(sz=sz1, buf=buf1);
    String y = new String(sz=sz2, buf=buf2);
    inputs[0] = x;
    inputs[1] = y;
    
    String z1 = udf(x, y);
    String z2 = SQL(depth, grammar);
    assert nFunc==depth-1;
    assert String_equals(z1, z2);
}
