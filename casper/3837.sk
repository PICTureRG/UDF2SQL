//--bnd-inbits=6  --fe-fpencoding AS_FIXPOINT

include "common/types.skh";
include "common/String.sk";
include "common/StringArray.sk";
include "common/Any.sk";
include "common/AnyArray.sk";
include "common/StringAnyArray.sk";
include "common/StringAnyMap.sk";
include "common/SQLFunctions.sk";
include "common/G1.sk";
include "common/G2.sk";
include "config.sk";

//////////////////////////////////////////
// Driver
String[1] inputs;

String STRING_LP = new String(sz=1, buf={'('});
String STRING_RP = new String(sz=1, buf={')'});

generator String SIMPLE_STR() {
    return {| EMPTY_STRING | STRING_LP | STRING_RP | inputs[0] |};
}

generator int SIMPLE_INT() {
    return {| -1 | 0 | 1 |};
}

generator double SIMPLE_DOUBLE() {
    return {| 1.0 |};
}

String udf(String str) {
    String t1 = String_replace(str, STRING_LP, EMPTY_STRING);
    String t2 = String_replace(t1, STRING_RP, EMPTY_STRING);
    return t2;
}

generator String SQL(int depth, int grammar) {
    if (grammar==1) return STR1(depth);
    if (grammar==2) return STR2(depth);
    assert 0;
}

harness void main(int sz1, char[sz1] buf1) {
    assume sz1<=2;
    String x = new String(sz=sz1, buf=buf1);
    inputs[0] = x;
    
    String z1 = udf(x);
    String z2 = SQL(depth, grammar);
    assert nFunc==depth-1;
    assert String_equals(z1, z2);
}
