//--bnd-inbits=2 --fe-fpencoding AS_FIXPOINT

include "common/types.skh";
include "common/String.sk";
include "common/StringArray.sk";
include "common/Any.sk";
include "common/AnyArray.sk";
include "common/StringAnyArray.sk";
include "common/StringAnyMap.sk";
include "common/SQLFunctions.sk";
include "common/G1.sk";
include "common/G2.sk";
include "config.sk";

//////////////////////////////////////////
// Driver

String[1] inputs;

generator String SIMPLE_STR() {
    return {| EMPTY_STRING | inputs[0] |};
}

generator int SIMPLE_INT() {
    return {| -1 | 0 | 1 |};
}

generator double SIMPLE_DOUBLE() {
    return {| 1.0 |};
}

bit udf(StringArray value, String t1) {
    bit t2 = StringArray_contains(value, t1);
    bit t3 = ! t2;
    return t3;
}

generator bit SQL(int depth, int grammar) {
    if (grammar==1) return BOOL1(depth);
    if (grammar==2) return BOOL2(depth);
    assert 0;
}

harness void main(int sz1, char[sz1] buf1, int sz2, int sz21, char[sz21] buf21, int sz22, char[sz22] buf22, int sz23, char[sz23] buf23, int sz24, char[sz24] buf24) {
    String t1 = new String(sz=sz1, buf=buf1);
    inputs[0] = t1;

    assume sz2 >=0 && sz2 <=4;
    StringArray value = new StringArray(sz=sz2);
    if (sz2 > 0) value.buf[0] = new String(sz=sz21, buf=buf21);
    if (sz2 > 1) value.buf[1] = new String(sz=sz22, buf=buf22);
    if (sz2 > 2) value.buf[2] = new String(sz=sz23, buf=buf23);
    if (sz2 > 3) value.buf[3] = new String(sz=sz24, buf=buf24);

    string_array_inputs[0] = value;
    n_string_array_inputs = 1;
    
    bit z1 = udf(value, t1);
    bit z2 = SQL(depth, grammar);
    assert nFunc==depth-1;

    assert z1 == z2;
}
